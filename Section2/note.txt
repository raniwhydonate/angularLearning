index.html file is served by the server.

Angular is a framework which allows you to create single page application.

app-root here of course is not a default HTML element instead, is one of our own components.


whenever this NG serve process rebuilds our project, it will create bundles, JavaScript script bundles,
and automatically add the right imports in the index html file.
A little convenience functionality for us. So in the final file, these script imports here are present,
and these script imports will contain our own code too.

So, these script files are therefore executed, and they're actually the first code to be executed,
and that is just something you have to keep in mind is the code we write in our main.ts file.
That is why it's called main.
main.ts file

platformBrowserDynamic()
  .bootstrapModule(AppModule)
  .catch((err) => console.error(err));

now Bootstraps starts our Angular application by passing an app.module to this method,



in app.module.ts

bootstrap array: which basically lists all the components

In this module, we tell Angular, Hey, there is this AppComponent which you should know when you try to start yourself.



Component---------------------
Components are a key feature in Angular. You build your whole application by composing it
from a couple of components, which you create on your own.

Each component has its own template, its own HTML code, maybe its own styling, and more importantly also its own business logic.

It allows you to split up your complex application, your complex webpage into reusable parts.
You may use a component more than once


add another components in the app root component

a component simply is just a class, a TypeScript class. So that Angular is able to instantiate it
to create objects based on the blueprint we set up here,

we should add something to it, which tells Angular that this is not only a normal TypeScript class
but instead something special, a component. We do this by adding a special decorator.
Decorators are a TypeScript feature which allow you to enhance your classes, for example.(enhance elements you use)

It's the component decorator. And decorators are always attached by adding an at sign in front of them.


we need to pass a JavaScript object to this component decorator to configure it
because without any configuration it's still not that valuable to Angular.


by default, Angular will not scan all your files here. So if you don't tell it that the server component exists
it doesn't know it, just creating the file is not enough. That is why we have to register it here in the NG module to tell Angular,

We do register new components in this declarations array.


Imports simply allows us to add some other modules to this module because I told you
you can split up your app into multiple modules and then you can import this modules to basically


CLI command to also create a new component------

ng generate component servers      /   ng g c servers



also update the app module.
Now the CLI should do this automatically which is why you already find the import and the declaration



a link to external template or just template to define it in this file.
But each component needs to have a template. This is the one property you have to have at all times.



You can't combine style URLs and styles You must only have one template.
You may have multiple style files or style definitions and you can choose between inline and external file.




COMPONENT SELECTOR----------------------

We select the app servers element by just typing app servers here. So that actually works like a css selector
and therefore you are not limited to selecting by element. You could put this into square brackets
to use the attribute selector. So in css you can select elements by attribute, by enclosing that attribute
in square brackets. And now if you save this you would see that our app actually is broken.
Because if we have a look at the error message, app servers is a unknown element because now
our code Angular doesn't recognize app servers anymore because we changed the selector to be an attribute.
So to make this work again, we would have to comment this out or remove it and maybe add a div
or any other element, a normal HTML element which has a app servers attribute now.
Now with this custom attribute added now, now the app works again because now Angular selects the element
by attribute and not by the element itself


selecting by ID won't work, that's not supported by Angular.
And all those pseudo selectors like hover and so on also don't work.




DATABINDING----------------------------

databinding = communication
(Communication between your TypeScript code of your component, your business logic, and the template)


                            Output Data
TypeScript code             ------->                    Template (HTML)
(BUsness logic)         String Interpolation({{data}})   
                        Property Binding([property]="data")

                              React to(User) Events  
                                 <-----------
                          Event Binding((event)="expresion)
          Combination of Both: Two-Way-Binding([(ngModel)]='data')



PROPERTY BINDING----------------------------------

Square brackets indicate to angular that we're using property binding
that we want to dynamically bind some property and disabled the HTML attribute.

With the square brackets, we are directly binding to this native disabled property this HTML element has.





PROPERTY BINDING VS STRING INTERPOLATION----------------------

if you want to output something in your template print some text to it, use string and interpolation.
If you want to change some property, be that of an HTML element or of a directive
or a component, typically use property binding.


one important note
don't mix property binding and string interpolation.


String interpolation only works in a normal template not within another expression of that template
not within property binding or something like this.


EVENT BINDING-----------------------

Parentheses are the signal that we're using event binding.


PASSING AND USING DATA WITH EVENT BINDING----------------

dollar sign event, super important s kind of a reserved variable name you can use
in the template when using event binding.

dollar sign event will simply be the data emitted with that event.



Two-Way-Binding!---------------------------

to enable the ngModel  directive. This is done by adding the FormsModule  to the imports[]  array in the AppModule.
You then also need to add the import from @angular/forms  in the app.module.ts file:
import { FormsModule } from '@angular/forms';

With two-way data binding, we combine property and event binding.




COMBINING all forms of DATABINDING---------------------



WHAT ARE DIRECTIVES?-----------------------------------

Directives are instructions in the DOM
Components are kind of such instructions in the DOM.


USE OF ngIf------------------

directive shipping helps for conditional rendering

the star is required because NG if is a structural directive
which means it changes the structure of our dom.
It either adds this element or it doesn't add it.


star at the beginning indicates that this is a structural directive
really changing the dome as you just saw.

enhancing ngIf with an else condition -------

NG template.

That is a component, a directive shipping, with Angular which you can use to mark places in the dom.


ngIf was a structural directive.
The other type of directives are attribute directives, which are called like this
"Unlike structural directives, attribute directives dont add or remove elements.
They only change the element they were placed on"
because they really just look like normal HTML attributes without a star


ngStyle- built in directive.

The directive name is just ngStyle. The square brackets indicate
that we want to bind to some property on this directive.